urlACM = http://doi.acm.org/10.1145/2743019
urlWiley = http://dx.doi.org/10.1002/smr.1757
urlIeee = http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=7122916
urlSpringer = http://link.springer.com/article/10.1007%2Fs10515-014-0152-4
urlUSENIX = https://www.usenix.org/conference/osdi14/technical-sessions/presentation/peter
urlElsevier = http://dx.doi.org/10.1016/j.jss.2015.08.048
urlIET = http://dx.doi.org/10.1049/iet-sen.2014.0008

abstractIEEE=Cloud computing is popularizing the computing paradigm in which data is outsourced to a third-party service provider (server) for data mining. Outsourcing, however, raises a serious security issue: how can the client of weak computational power verify that the server returned correct mining result? In this paper, we focus on the specific task of frequent itemset mining. We consider the server that is potentially untrusted and tries to escape from verification by using its prior knowledge of the outsourced data. We propose efficient probabilistic and deterministic verification approaches to check whether the server has returned correct and complete frequent itemsets. Our probabilistic approach can catch incorrect results with high probability, while our deterministic approach measures the result correctness with 100 percent certainty. We also design efficient verification methods for both cases that the data and the mining setup are updated. We demonstrate the effectiveness and efficiency of our methods using an extensive set of empirical results on real datasets.
keywordsIEEE=cloud computing; data mining; formal verification; probability; trusted computing; cloud computing; computing paradigm; data-mining-as-a-service paradigm; deterministic verification approaches; outsourced frequent itemset mining; outsourcing; probabilistic verification approaches; result correctness verification; security issue; server; third-party service provider; trust-but-verify; Artificial intelligence; Complexity theory; Data mining; Itemsets; Probabilistic logic; Security; Servers; Cloud computing; data mining as a service; result integrity verification; security;
pdfurlIEEE=http://ieeexplore.ieee.org/iel7/4629386/7393924/07122916.pdf?arnumber=7122916
pagesIEEE=15
referencesIEEE=[R. Agrawal and R. Srikant, "Fast algorithms for mining association rules in large databases,"Proc. 20th Int. Conf. Very Large Data Bases, pp. 487-499, 1994, L. Babai, L. Fortnow, L. A. Levin and M. Szegedy, "Checking computations in polylogarithmic time,"Proc. 23rd Annu. ACM Symp. Theory Comput., pp. 21-32, 1991 [CrossRef]\u00A0, R. Canetti, B. Riva and G. N. Rothblum, "Verifiable computation with two or more clouds,"Proc. Workshop Cryptography Security Clouds, 2011, K.-T. Chuang, J.-L. Huang and M.-S. Chen, "Power-law relationship and Self-similarity in the itemset support distribution: Analysis and applications,"VLDB J., vol. 17, pp. 1121-1141, 2008 [CrossRef]\u00A0, R. Gennaro, C. Gentry and B. Parno, "Non-interactive verifiable computing: Outsourcing computation to untrusted workers,"Proc. 30th Annu. Conf. Adv. Cryptol., pp. 465-482, 2010 [CrossRef]\u00A0, F. Giannotti, L. V. S. Lakshmanan, A. Monreale, D. Pedreschi and W. Hui Wang, "Privacy-preserving data mining from outsourced databases,"Proc. 3rd Int. Conf. Comput., Privacy Data Protection, pp. 411-426, 2011 [CrossRef]\u00A0, S. Goldwasser, S. Micali and C. Rackoff, "The knowledge complexity of interactive proof systems,"SIAM J. Comput., vol. 18, pp. 186-208, 1989 [CrossRef]\u00A0, H. Hacigümü\u015F, B. Iyer, C. Li and S. Mehrotra, "Executing SQL over encrypted data in the database-service-provider model,"Proc. ACM SIGMOD Int. Conf. Manag. Data, pp. 216-227, 2002, F. Li, M. Hadjieleftheriou, G. Kollios and L. Reyzin, "Dynamic authenticated index structures for outsourced databases,"Proc. ACM SIGMOD Int. Conf. Manag. Data, pp. 121-132, 2006 [CrossRef]\u00A0, R. Liu, H. Wang, A. Monreale, D. Pedreschi, F. Giannotti and WengeGuo, "Audio: An integrity auditing framework of Outlier-mining-as-a-service systems,"Proc. Eur. Conf. Mach. Learning Knowl. Discovery Databases, pp. 1-18, 2012, I. Molloy, N. Li and T. Li, "On the (In)security and (Im)practicality of outsourcing precise association rule mining,"Proc. IEEE 9th Int. Conf. Data Mining, pp. 872-877, 2009 Abstract | Full Text: PDF (327KB), C. Papamanthou, R. Tamassia and N. Triandopoulos, "Authenticated hash tables,"Proc. 15th ACM Conf. Comput. Commun. Security, pp. 437-448, 2008 [CrossRef]\u00A0, S. Setty, A. J. Blumberg and M. Walfish, "Toward practical and unconditional verification of remote computations.", Proc. 13th USENIX Conf. Hot Topics Operating Syst., 29, W. K. Wong, D. W. Cheung, B. Kao, E. Hung and N. Mamoulis, "An audit environment for outsourcing of frequent itemset mining,"Proc. VLDB Endowment, vol. 2, pp. 1162-1172, 2009 [CrossRef]\u00A0, F. Zhu, X. Yan, J. Han, P. S. Yu and H. Cheng, "Mining colossal frequent patterns by core pattern fusion,"Proc. IEEE 23rd Int. Conf. Data Eng., pp. 706-715, 2007 Abstract | Full Text: PDF (247KB) | Full Text: HTML, S. Benabbas, R. Gennaro and Y. Vahlis, "Verifiable delegation of computation over large datasets,"Proc. 31st Annu. Conf. Adv. Cryptol., pp. 111-131, 2011 [CrossRef]\u00A0, R. Canetti, B. Riva and G. N. Rothblum, "Practical delegation of computation using multiple servers,"Proc. 18th ACM Conf. Comput. Commun. Security, pp. 445-454, 2011 [CrossRef]\u00A0, D. Fiore and R. Gennaro, "Publicly verifiable delegation of large polynomials and matrix computations, with applications,"Proc. ACM Conf. Comput. Commun. Security, pp. 501-512, 2012 [CrossRef]\u00A0, A. Menezes, S. Vanstone and T. Okamoto, "Reducing elliptic curve logarithms to logarithms in a finite field,"Proc. 23rd Annu. ACM Symp. Theory Comput., pp. 80-89, 1991 [CrossRef]\u00A0, R. C. Merkle, "Protocols for public key cryptosystems,"Proc. Symp. Security Privacy, 1980 Abstract | Full Text: PDF (632KB), C. Papamanthou, R. Tamassia and N. Triandopoulos, "Optimal verification of operations on dynamic sets,"Proc. 31st Annu. Cryptol. Conf. Adv. Cryptol., pp. 91-110, 2011 [CrossRef]\u00A0, M. T. Goodrich, C. Papamanthou, D. Nguyen, R. Tamassia, C. V. Lopes, O. Ohrimenko and N. Triandopoulos, "Efficient verification of web-content searching through authenticated web crawlers,"Proc. VLDB Endowment, vol. 5, pp. 920-931, 2012 [CrossRef]\u00A0, B. Parno, M. Raykova and V. Vaikuntanathan, "How to delegate and verify in public: Verifiable computation from Attribute-based encryption,"Proc. 9th Theory Cryptography Conf., pp. 422-439, 2012 [CrossRef]\u00A0, D. Burdick, M. Calimlim and J. Gehrke, "MAFIA: A maximal frequent itemset algorithm for transactional databases,"Proc. Int. Conf. Data Eng., pp. 443-452, 2001 Abstract | Full Text: PDF (740KB) | Full Text: HTML]
authorsIEEE=[author name:Boxiang Dong, affiliation:, Stevens Institute of Technology, Hoboken, NJ;, author name:Ruilin Liu, affiliation:, author name:Hui Wendy Wang, affiliation:]

abstractACM=Integer overflow bugs in C and C++ programs are difficult to track down and may lead to fatal errors or exploitable vulnerabilities. Although a number of tools for finding these bugs exist, the situation is complicated because not all overflows are bugs. Better tools need to be constructed, but a thorough understanding of the issues behind these errors does not yet exist. We developed IOC, a dynamic checking tool for integer overflows, and used it to conduct the first detailed empirical study of the prevalence and patterns of occurrence of integer overflows in C and C++ code. Our results show that intentional uses of wraparound behaviors are more common than is widely believed; for example, there are over 200 distinct locations in the SPEC CINT2000 benchmarks where overflow occurs. Although many overflows are intentional, a large number of accidental overflows also occur. Orthogonal to programmers' intent, overflows are found in both well-defined and undefined flavors. Applications executing undefined operations can be, and have been, broken by improvements in compiler optimizations. Looking beyond SPEC, we found and reported undefined integer overflows in SQLite, PostgreSQL, SafeInt, GNU MPC and GMP, Firefox, LLVM, Python, BIND, and OpenSSL; many of these have since been fixed.
keywordsACM=Integer overflow; integer wraparound; undefined behavior
pdfurlACM=http://dl.acm.org/ft_gateway.cfm?id=2743019&type=pdf
pagesACM=1
referencesACM=[D. Brumley, T. Chiueh, R. Johnson, H. Lin, and D. Song. 2007. RICH: Automatically protecting against integer-based vulnerabilities. In Proceedings of the Symposium on Network and Distributed Systems Security (NDSS)., CERT. 2006. IntegerLib, a Secure Integer Library. (2006). http://www.cert.org/secure-coding/IntegerLib.zip., P. Chen, Y. Wang, Z. Xin, B. Mao, and L. Xie. 2009. BRICK: A binary tool for run-time detecting and locating integer-based vulnerability. In Proceedings of the 4th International Conference on Availability, Reliability and Security. 208--215., S. Christey and R. A. Martin. 2007. Vulnerability type distributions in CVE. Tech. report. MITRE Corporation. May. http://cwe.mitre.org/documents/vuln-trends.html., S. Christey, R. A. Martin, M. Brown, A. Paller, and D. Kirby. 2011. 2011 CWE/SANS top 25 most dangerous software errors. Tech. report. MITRE Corporation. September. http://cwe.mitre.org.top25., Clang. 2011. Clang: A C language family frontend for LLVM. http://clang.llvm.org. (Last accessed Sept. 2011)., Roger B. Dannenberg , Will Dormann , David Keaton , Robert C. Seacord , David Svoboda , Alex Volkovitsky , Timothy Wilson , Thomas Plum, As-If Infinitely Ranged Integer Model, Proceedings of the 2010 IEEE 21st International Symposium on Software Reliability Engineering, p.91-100, November 01-04, 2010  [doi>10.1109/ISSRE.2010.29], Will Dietz , Peng Li , John Regehr , Vikram Adve, Understanding integer overflow in C/C++, Proceedings of the 34th International Conference on Software Engineering, June 02-09, 2012, Zurich, Switzerland, D. Hodges. 2008. Why do Pinky and Inky have different behaviors when Pac-Man is facing up? (Dec. 2008). http://donhodges.com/pacman_pinky_explanation.htm. (Last accessed Sept. 2011)., Intel. 2013. Intel VTune amplifier XE 2013. (2013). http://software.intel.com/en-us/intel-vtune-amplifier-xe, Chris Lattner , Vikram Adve, LLVM: A Compilation Framework for Lifelong Program Analysis & Transformation, Proceedings of the international symposium on Code generation and optimization: feedback-directed and runtime optimization, p.75, March 20-24, 2004, Palo Alto, California, D. LeBlanc. 2004. Integer handling with the C++ SafeInt class. http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dncode/html/secure01142004.asp., D. LeBlanc. 2011. Author's blog: Integer handling with the C++ SafeInt class. http://safeint.codeplex.com/., N. G. Leveson , C. S. Turner, An Investigation of the Therac-25 Accidents, Computer, v.26 n.7, p.18-41, July 1993  [doi>10.1109/MC.1993.274940], MITRE Corporation. 2002. CVE-2002-0639: Integer overflow in sshd in OpenSSH. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0639., MITRE Corporation. 2010. CVE-2010-2753: Integer overflow in Mozilla Firefox, Thunderbird and SeaMonkey. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-2753., MITRE Corporation. 2013. Common vulnerability and exposures. http://cve.mitre.org/., David Molnar , Xue Cong Li , David A. Wagner, Dynamic test generation to find integer bugs in x86 binary linux programs, Proceedings of the 18th conference on USENIX security symposium, p.67-82, August 10-14, 2009, Montreal, Canada, N. Nethercote and J. Seward. 2003. Valgrind: A program supervision framework. In Proceedings of the 3rd Workshop on Runtime Verification., T. Wang, T. Wei, Z. Lin, and W. Zou. 2009. IntScope: Automatically detecting integer overflow vulnerability in X86 binary using symbolic execution. In Proceedings of the 16th Network and Distributed System Security Symp., Wikipedia. 2011a. Arbitrary-precision arithmetic. http://en.wikipedia.org/wiki/Arbitrary-precision_arithmetic. (Last accessed Sept. 2011)., Wikipedia. 2011b. Pac-Man. http://en.wikipedia.org/w/index.php?title=Pac-Man&oldid==450692749#Split-screen. (Last accessed Sept. 2011).]
authorsACM=[author name:Will Dietz, affiliation:University of Illinois at Urbana-Champaign;, author name:Peng Li, affiliation:University of Utah;, author name:John Regehr, affiliation:University of Utah;, author name:Vikram Adve, affiliation:University of Illinois at Urbana-Champaign;]

abstractWiley=The adoption of Agile Software Development in large companies is a recent phenomenon of great interest both for researchers and practitioners. Although intra-team interaction is well supported by established agile practices, the critical interaction between the agile team and other parts of the organization is still unexplored in literature. Such interactions slow down the development, hindering the achievement of business goals based on speed: short time to market, quick replication of products of a product-line, and reaction time for product evolution.We have employed a two-year long multiple-case case-study, collecting data through interviews and a survey in three large companies developing embedded software. Through a combination of qualitative and quantitative analysis, we have found strong evidence that interaction challenges between the development team and other groups in the organization hinder speed and are widespread in the organizations.This paper also identifies current practices in use at the studied companies and provides detailed guidelines for novel solutions in the investigated domain. Such practices are called boundary-spanning activities in information system research and coordination theory. We present a comparison between large embedded software companies employing agile and developing a line of products based on reused assets and agile companies developing pure software. We highlight specific contextual factors and areas where novel spanning activities are needed for mitigating the interaction challenges hindering speed. Copyright © 2015 John Wiley & Sons, Ltd.
keywordsWiley=software product lineinter-group interaction;Agile Software Development;development speed;boundary-spanning activities;embedded software;software product line
pdfurlWiley=http://onlinelibrary.wiley.com/doi/10.1002/smr.1757/pdf
pagesWiley=23
referencesWiley=[Dingsøyr T, Nerur S, Balijepally V, Moe NB. A decade of agile methodologies: towards explaining agile software development. Journal of Systems and Software 2012; 85(6):1213\u20131221., Baskerville R, Pries-Heje J, Madsen S. Post-agility: what follows a decade of agility? Information and Software Technology 2011; 53(5):543\u2013555., Xie M, Shen M, Rong G, Shao D. Empirical studies of embedded software development using agile methods: a systematic review. in Proceedings of the 2nd international workshop on Evidential assessment of software technologies, 2012, pp. 21\u201326., Martini A, Pareto L, Bosch J. Communication factors for speed and reuse in large-scale agile software development. in Proceedings of the 17th International Software Product Line Conference, New York, NY, USA, 2013, pp. 42\u201351., Martini A, Pareto L, Bosch J. Improving businesses success by managing interactions among Agile teams in large organizations. Software Business. From Physical Products to Software Services and SolutionsHerzwurm G, Margaria T (eds.). Springer: Berlin Heidelberg, 2013; 60\u201372., Bosch J, Bosch-Sijtsema P. From integration to composition: on the impact of software product lines, global development and ecosystems. Journal of Systems and Software 2010; 83(1):67\u201376., Dybå T, Dingsøyr T. Empirical studies of agile software development: a systematic review. Information and Software Technology 2008; 50(9\u201310):833\u2013859., Martini A, Pareto L, Bosch J. Enablers and inhibitors for speed with reuse. in Proceedings of the 16th International Software Product Line Conference - Volume 1, New York, NY, USA, 2012, pp. 116\u2013125., Pikkarainen M, Haikara J, Salo O, Abrahamsson P, Still J. The impact of agile practices on communication in software development. Empirical Software Engineering 2008; 13(3):303\u2013337., Hossain E, Babar MA, Paik H. Using scrum in global software development: a systematic literature review. Fourth IEEE International Conference on Global Software Engineering, 2009. ICGSE 2009. 2009; 175\u2013184., Levina N, Vaast E. The emergence of boundary spanning competence in practice: implications for implementation and use of information systems. MIS Quarterly 2005; 29(2):335\u2013363., Malone TW, Crowston K. The interdisciplinary study of coordination. ACM Computing Surveys 1994; 26(1):87\u2013119., Strode DE, Huff SL, Hope B, Link S. Coordination in co-located agile software development projects. Journal of Systems and Software 2012; 85(6):1222\u20131238., Blackburn JD, Scudder GD, Van Wassenhove LN. Improving speed and productivity of software development: a global survey of software developers. IEEE Transactions on Software Engineering 1996; 22(12):875\u2013885., Ma Z, Collofello JS, Smith-Daniels DE. Causes and solutions for schedule slippage: a survey of software projects. Performance, Computing, and Communications Conference, 2000. IPCCC \u201900. Conference Proceeding of the IEEE International. 2000; 373\u2013379., Ma Z, Collofello JS, Smith-Daniels DE. Improving software on-time delivery: an investigation of project delays. 2000 IEEE Aerospace Conference Proceedings, vol. 4. 2000; 421\u2013434., Poppendieck M, Poppendieck T. Implementing Lean Software Development: From Concept to Cash (The Addison-Wesley Signature Series). Addison-Wesley Professional, 2006., Poppendieck M. Lean software development. Companion to the Proceedings of the 29th International Conference on Software Engineering. 2007; 165\u2013166., Wang X, Conboy K, Cawley O. \u2018Leagile\u2019 software development: an experience report analysis of the application of lean approaches in agile software development. Journal of Systems and Software 2012; 85(6):1287\u20131299., Santos FM, Eisenhardt KM. Organizational boundaries and theories of organization. Organization Science 2005; 16(5):491\u2013508., Eklund U, Bosch J. Applying Agile Development in mass-produced embedded systems. Agile Processes in Software Engineering and Extreme Programming. Springer: Malmö, Sweden, 2012; 31\u201346., Ronkainen J, Abrahamsson P. Software development under stringent hardware constraints: do agile methods have a chance?. Extreme Programming and Agile Processes in Software Engineering, vol. 2675Marchesi M, Succi G (eds.). Springer: Berlin/Heidelberg, 2003; 1012\u20131012., Yin RK. Case Study Research: Design and Methods. SAGE: Thousand Oaks, California, 2009., Dubois A, Gadde L-E. Systematic combining: an abductive approach to case research. Journal of Business Research 2002; 55(7):553\u2013560., Glaser BG, Strauss AL. The Discovery of Grounded Theory: Strategies for Qualitative Research. Transaction Publishers, 2009., Strauss A, Corbin JM. Grounded Theory in Practice. SAGE: Thousand Oaks, California, 1997., Runeson P, Höst M. Guidelines for conducting and reporting case study research in software engineering. Empirical Software Engineering 2008; 14(2):131\u2013164., Flick U. An Introduction to Qualitative Research. SAGE: Thousand Oaks, California, 2009., Czaja R, Blair J. Designing Surveys: A Guide to Decisions and Procedures. Pine Forge Press: Thousand Oaks, California, 2005., Kahkonen T. Agile methods for large organizations - building communities of practice. Agile Development Conference, 2004. 2004; 2\u201310., Lee S, Yong H-S. Distributed agile: project management in a global environment. Empirical Software Engineering 2010; 15(2):204\u2013217., Wohlin C, Runeson P, Host M, Ohlsson C, Regnell B, Wesslén A. Experimentation in Software Engineering: an Introduction. Kluver Academic Publishers, 2000., Lindvall M, Muthig D, Dagnino A, Wallin C, Stupperich M, Kiefer D, May J, Kahkonen T. Agile software development in large organizations. Computer 2004; 37(12):26\u201334., Karlstrom D, Runeson P. Combining agile methods with stage-gate project management. IEEE Software 2005; 22(3):43\u201349., Kettunen P, Laanti M. Combining agile software projects and large-scale organizational agility. Software Process: Improvement and Practice 2008; 13(2):183\u2013193., Lee EC. Forming to performing: transitioning large-scale project into Agile. Agile, 2008. AGILE '08 Conference. 2008; 106\u2013111., Turk D, France R, Rumpe B. Limitations of agile software processes. Third International Conference on eXtreme Programming and Agile Processes in Software Engineering (XP 2002). 2002., Paasivaara M, Lassenius C. Collaboration practices in global inter-organizational software development projects. Software Process: Improvement and Practice 2003; 8(4):183\u2013199.]
authorsWiley=[author name:Martini, Antonio, affiliation:Chalmers University of Technology Software Engineering Gothenburg Sweden;Chalmers University of Technology Computer Science and Engineering Gothenburg Sweden;, author name:Pareto, Lars, affiliation:Chalmers University of Technology Computer Science and Engineering Gothenburg Sweden;, author name:Bosch, Jan, affiliation:Chalmers University of Technology Computer Science and Engineering Gothenburg Sweden;]

abstractSpringer=The Linux kernel does not export a stable, well-defined kernel interface, complicating the development of kernel-level services, such as device drivers and file systems. While there does exist a set of functions that are exported to external modules, this set of functions frequently changes, and the functions have implicit, ill-documented preconditions. No specific debugging support is provided. We present Diagnosys, an approach to automatically constructing a debugging interface for the Linux kernel. First, a designated kernel maintainer uses Diagnosys to identify constraints on the use of the exported functions. Based on this information, developers of kernel services can then use Diagnosys to generate a debugging interface specialized to their code. When a service including this interface is tested, it records information about potential problems. This information is preserved following a kernel crash or hang. Our experiments show that the generated debugging interface provides useful log information and incurs a low performance penalty.
emailSpringer=tegawende.bissyande@uni.lu;
keywordsSpringer=Diagnosys;Debugging;Linux;Plugin;Reliability;Testing;
pdfurlSpringer=http://link.springer.com/content/pdf/10.1007%2Fs10515-014-0152-4.pdf
pagesSpringer=39
referencesSpringer=[Albinet, A., Arlat, J., Fabre, J.C.: Characterization of the impact of faulty drivers on the robustness of the Linux kernel. In: Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN\u201904), pp. 867\u2013876. Florence, Italy (2004), Arnout, K., Meyer, B.: Uncovering hidden contracts: the.NET example. Computer 36, 48\u201355 (2003)CrossRef, Ball, T., Bounimova, E., Cook, B., Levin, V., Lichtenberg, J., McGarvey, C., Ondrusek, B., Rajamani, S.K., Ustuner, A.: Thorough static analysis of device drivers. In: Proceedings of the 2006 ACM SIGOPS/EuroSys European Conference on Computer Systems (EuroSys\u201906), pp. 73\u201385. Leuven, Belgium (2006), Bissyandé, T.F., Réveillère, L., Bromberg, Y.D., Lawall, J.L., Muller, G.: Bridging the gap between legacy services and web services. In: Proceedings of the ACM/IFIP/USENIX 11th International Conference on Middleware. Middleware \u201910, pp. 273\u2013292. Springer, Bangalore (2010), Bissyandé, T.F., Réveillère, L., Lawall, J.L., Muller, G.: Diagnosys: automatic generation of a debugging interface to the linux kernel. In: Proceedings of 27th IEEE/ACM International Conference on Automated Software Engineering (ASE\u201912), pp. 60\u201369. Essen, Germany (2012), Bissyandé, T.F.: Contributions for improving debugging of kernel-level services in a monolithic operating system. Ph.D. thesis, Université Sciences et Technologies-Bordeaux I (2013), Bissyandé, T.F., Lo, D., Jiang, L., Réveillère, L., Klein, J., Le Traon, Y.: Got issues? Who cares about it? A large scale investigation of issue trackers from github. In: IEEE 24th International Symposium on Software Reliability Engineering (ISSRE) (2013), Bissyandé, T.F., Réveillére, L., Lawall, J.L., Bromberg, Y.D., Muller, G.: Implementing an embedded compiler using program transformation rules. Software: Practice and Experience (2013), Bissyandé, T.F., Thung, F., Lo, D., Jiang, L., Réveillère, L.: Popularity, interoperability, and impact of programming languages in 100,000 open source projects. In: Proceedings of the 37th IEEE Annual Computer Software and Applications Conference (COMPSAC \u201913), pp. 303\u2013312. Washington (2013), Bray, T.: The Bonnie file system benchmark. http://www.textuality.com/bonnie/ (1996), Bugrara, S., Aiken, A.: Verifying the safety of user pointer dereferences. In: IEEE Symposium on Security and Privacy, pp. 325\u2013338. Oakland (2008), Chou, A., Yang, J., Chelf, B., Hallem, S., Engler, D.: An empirical study of operating systems errors. In: Proceedings of the 18th ACM Symposium on Operating System Principles (SOSP\u201901), pp. 73\u201388. Banff, Canada (2001), Corbet, J.: Injecting faults into the kernel. http://lwn.net/Articles/209257/ (2004), Cotroneo, D., Natella, R., Russo, S.: Assessment and improvement of hang detection in the Linux operating system. In: Proceedings of the 28th IEEE International Symposium on Reliable Distributed Systems (SRDS\u201909), pp. 288\u2013294. Niagara Falls (2009), Dillig, I., Dillig, T., Aiken, A.: Reasoning about the unknown in static analysis. Commun. ACM 53(8), 115\u2013123 (2010)CrossRef, Donahue, A.: Debugging domain-specific languages. Master\u2019s thesis, University of Toronto (2010), Engler, D., Chen, D.Y., Hallem, S., Chou, A., Chelf, B.: Bugs as deviant behavior: a general approach to inferring errors in systems code. In: Proceedings of the Eighteenth ACM Symposium on Operating Systems Principles (SOSP\u201901), pp. 57\u201372. Banff, Alberta (2001), Ernst, M.D., Perkins, J.H., Guo, P.J., McCamant, S., Pacheco, C., Tschantz, M.S., Xiao, C.: The Daikon system for dynamic detection of likely invariants. Sci. Comput. Program. 69, 35\u201345 (2007)MATHMathSciNetCrossRef, Etsion, Y., Tsafrir, D., Kirkpatrick, S., Feitelson, D.G.: Fine grained kernel logging with KLogger: experience and insights. In: EuroSys, pp. 259\u2013272. Lisbon, Portugal (2007), Fetzer, C., Xiao, Z.: Healers: a toolkit for enhancing the robustness and security of existing applications. In: Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN\u201903), pp. 317\u2013322. San Francisco (2003), Flanagan, C., Leino, K.R.M.: Houdini, an annotation assistant for ESC/Java. FME, pp. 500\u2013517. Springer, London (2001), Flanagan, C., Leino, K.R.M., Lillibridge, M., Nelson, G., Saxe, J.B., Stata, R.: Extended static checking for Java. In: Proceedings of the ACM SIGPLAN 2002 Conference on Programming Language Design and Implementation (PLDI\u201902), pp. 234\u2013245. Berlin, Germany (2002), Frade, M.J., Pinto, J.S.: Verification conditions for source-level imperative programs. Comput. Sci. Rev. 5(3), 252\u2013277 (2011)MATHCrossRef, Ganapathi, A., Ganapathi, V., Patterson, D.: Windows XP kernel crash analysis. In: LISA\u201906, pp. 49\u2013159. Washington (2006), Hirschfeld, R., Perscheid, M., Schubert, C., Appeltauer, M.: Dynamic contract layers. In: Proceedings of the 2010 Symposium on Applied Computing (SAC\u201910), pp. 2169\u20132175. Sierre, Switzerland (2010), Hoare, C.A.R.: An axiomatic basis for computer programming. Commun. ACM 12(10), 576\u2013580 (1969)MATHCrossRef, Huth, M., Ryan, M.: Logic in Computer Science: Modelling and Reasoning About Systems. Cambridge University Press, Cambridge (2000), Jones, R.: Netperf: A Network Performance Benchmark, Version 2.4.5. http://www.netperf.org (2000), Kroah-Hartman, G.: The Linux kernel driver interface (all your questions answered and then some). http://www.kernel.org/doc/Documentation/stable_api_nonsense.txt (2013), Kroah-Hartman, G.: Driving me nuts: things you should never do in the kernel. Linux J. 133, 9 (2005). http://www.linuxjournal.com/article/8110, Kuznetsov, V., Chipounov, V., Candea, G.: Testing closed-source binary device drivers with DDT. In: USENIX Annual Technical Conference (ATC\u201910). Boston (2010), Lawall, J.L., Brunel, J., Palix, N., Hansen, R.R., Stuart, H., Muller, G.: WYSIWIB: a declarative approach to finding API protocols and bugs in Linux code. In: Proceedings of the 2009 International Conference on Dependable Systems and Networks (DSN\u201909), pp. 43\u201352. Lisbon, Portugal (2009), Li, Z., Zhou, Y.: Pr-miner: automatically extracting implicit programming rules and detecting violations in large software code. In: Proceedings of the 10th European Software Engineering Conference Held Jointly with 13th ACM SIGSOFT International Symposium on Foundations of Software Engineering (ESEC/FSE-13), pp. 306\u2013315. Lisbon, Portugal (2005), Mao, Y., Chen, H., Zhou, D., Wang, X., Zeldovich, N., Kaashoek, M.F.: Software fault isolation with API integrity and multi-principal modules. In: SOSP, pp. 115\u2013128. Cascais, Portugal (2011), Marinescu, P., Candea, G.: Efficient testing of recovery code using fault injection. ACM Trans. Comput. Syst. (TOCS) 29(3), 1\u201338 (2011)CrossRef, Meyer, B.: Object-Oriented Software Construction, 1st edn. Prentice-Hall, Upper Saddle River (1988), Mills, C.: Using Design by Contract in C, 1st edn. O\u2019Reilly, Sebastopol (2004). http://www.OnLamp.com, Nellitheertha, H.: Reboot Linux faster using Kexec. http://www.ibm.com/developerworks/linux/library/l-kexec/index.html (2004), Padioleau, Y., Lawall, J.L., Hansen, R.R., Muller, G.: Documenting and automating collateral evolutions in Linux device drivers. In: Proceedings of the 2008 ACM SIGOPS/EuroSys European Conference on Computer Systems (EuroSys\u201908), pp. 247\u2013260. Glasgow, Scotland (2008), Palix, N., Lawall, J., Muller, G.: Tracking code patterns over multiple software versions with herodotos. In: Proceedings of the 2010 International Conference on Aspect-Oriented Software Development (AOSD\u201910), pp. 169\u2013180. Rennes and Saint-Malo, France (2010), Palix, N., Saha, S., Thomas, G., Calvès, C., Lawall, J.L., Muller, G.: Faults in Linux: ten years later. In: Proceedings of the 2011 International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS\u201911). Newport Beach (2011), Parnin, C., Orso, A.: Are automated debugging techniques actually helping programmers? In: Proceedings of the 2011 International Symposium on Software Testing and Analysis, pp. 199\u2013209. ACM (2011), Post, H., Küchlin, W.: Integrated static analysis for Linux device driver verification. In: Proceedings of the 6th International Conference on Integrated Formal Methods (IFM\u201907), pp. 518\u2013537. Oxford (2007), Ramanathan, M.K., Grama, A., Jagannathan, S.: Path-sensitive inference of function precedence protocols. In: Proceedings of the 29th International Conference on Software Engineering (ICSE \u201907), pp. 240\u2013250. Minneapolis (2007), Rostedt, S.: Debugging the kernel using ftrace. http://lwn.net/Articles/365835/ (2009), Rubini, A., Corbet, J.: Linux Device Drivers, 2nd edn, p. 109. O\u2019Reilly Media, Sebastopol (2001), Ryzhyk, L., Chubb, P., Kuz, I., Heiser, G.: Dingo: taming device drivers. In: Proceedings of the 2009 ACM SIGOPS/EuroSys European Conference on Computer Systems (EuroSys\u201909), pp. 275\u2013288. Nuremberg, Germany (2009), Strembeck, M., Zdun, U.: An approach for the systematic development of domain-specific languages. Softw. Pract. Exp. 39(15), 1253\u20131292 (2009)CrossRef, Yuan, D., Mai, H., Xiong, W., Tan, L., Zhou, Y., Pasupath, S.: Sherlog: error diagnosis by connecting clues from run-time logs. In: Proceedings of the 2010 International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS\u201910), pp. 143\u2013154. Pittsburgh (2010), Yuan, D., Zheng, J., Park, S., Zhou, Y., Savage, S.: Improving software diagnosability via log enhancement. In: ASPLOS, pp. 3\u201314. Newport Beach (2011)]
authorsSpringer=[author name:Tegawendé F. Bissyandé, affiliation:University of Luxembourg;, author name:Laurent Réveillère, affiliation:University of Bordeaux;, author name:Julia L. Lawall, affiliation:Inria/LIP6/UPMC/Sorbonne University Regal;, author name:Gilles Muller, affiliation:Inria/LIP6/UPMC/Sorbonne University Regal;]

abstractUSENIX=Recent device hardware trends enable a new approach to the design of network server operating systems. In a traditional operating system, the kernel mediates access to device hardware by server applications, to enforce process isolation as well as network and disk security.We have designed and implemented a new operating system, Arrakis, that splits the traditional role of the kernel in two. Applications have direct access to virtualized I/O devices, allowing most I/O operations to skip the kernel entirely, while the kernel is re-engineered to provide network and disk protection without kernel mediation of every operation.We describe the hardware and software changes needed to take advantage of this new abstraction, and we illustrate its power by showing improvements of 2-5 in latency and 9 in throughput for a popular persistent NoSQL store relative to a well-tuned Linux implementation.
keywordsUSENIX=
pdfurlUSENIX=https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-peter_simon.pdf
pagesUSENIX=16
referencesUSENIX=
authorsUSENIX=[author name:Simon Peter, affiliation:University of Washington;, author name:Jialin Li, affiliation:University of Washington;, author name:Irene Zhang, affiliation:University of Washington;, author name:Dan R. K. Ports, affiliation:University of Washington;, author name:Doug Woos, affiliation:University of Washington;, author name:Arvind Krishnamurthy, affiliation:University of Washington;, author name:Thomas Anderson, affiliation:University of Washington;, author name:Timothy Roscoe, affiliation:ETH Zürich;]

abstractElsevier=Software test process improvement (STPI) approaches are frameworks that guide software development organizations to improve their software testing process. We have identified existing STPI approaches and their characteristics (such as completeness of development, availability of information and assessment instruments, and domain limitations of the approaches) using a systematic literature review (SLR). Furthermore, two selected approaches (TPI NEXT and TMMi) are evaluated with respect to their content and assessment results in industry. As a result of this study, we have identified 18 STPI approaches and their characteristics. A detailed comparison of the content of TPI NEXT and TMMi is done. We found that many of the STPI approaches do not provide sufficient information or the approaches do not include assessment instruments. This makes it difficult to apply many approaches in industry. Greater similarities were found between TPI NEXT and TMMi and fewer differences. We conclude that numerous STPI approaches are available but not all are generally applicable for industry. One major difference between available approaches is their model representation. Even though the applied approaches generally show strong similarities, differences in the assessment results arise due to their different model representations.
emailElsevier=wasif.afzal@gmail.com;wasif.afzal@mdh.se;Snehal.Alone@gmail.com;Kerstin.Glocksien@gmail.com;richard.torkar@cse.gu.se;
keywordsElsevier=Software test process improvement; Systematic literature review; Case study
pdfurlElsevier=http://www.sciencedirect.com/science/article/pii/S0164121215001910/pdfft?md5=93fe30182d3bd3cd177c7714f325f654&pid=1-s2.0-S0164121215001910-main.pdf
pagesElsevier=33
authorsElsevier=[author name:Wasif Afzal, affiliation:School of Innovation, Design and Engineering, Mälardalen University, Västerås, Sweden;Department of Computer Science, Bahria University, Islamabad, Pakistan;, author name:Snehal Alone, affiliation:Chalmers University of Technology, University of Gothenburg, Sweden;, author name:Kerstin Glocksien, affiliation:Chalmers University of Technology, University of Gothenburg, Sweden;, author name:Richard Torkar, affiliation:Chalmers University of Technology, University of Gothenburg, Sweden;]

abstractIET=Determining how to select a subset of test cases with high-fault detection capability becomes a key issue in code-level regression testing. Cluster analysis has been proposed to deal with this issue. It partitions test cases into clusters based on the similarity of execution profiles. In previous studies, execution profiles were represented as binary or numeric vectors. The vector model only considers the number of times that a function or statement is executed. However, it ignores sequential, the relations and structural information between function calls. Therefore vector-based methods do not always generate satisfying results. In this study, the authors presented cluster analysis of three different types of structural profiles, that is, function execution sequence, function call sequence (FCS) and function call tree. They designed and conducted empirical studies on five medium-sized programs to validate the effects of different profiles on regression test case reduction. Experimental results illustrate that sequential, call relations and structural information can aid to further improve fault detection effectiveness. In view of cost-effectiveness, FCS is regarded as to be the optimal profile. Furthermore, cluster analysis of FCSs is comparable to the additional branch coverage reduction technique with respect to fault detection effectiveness.
keywordsIET=code-level regression testing; cost-effectiveness; cluster analysis; function call tree; fault detection; regression test case reduction; binary vector; branch coverage reduction technique; numeric vector; function call sequence; structural profile; function execution sequence; call relations
pdfurlIET=http://ieeexplore.ieee.org/iel7/4124007/7084233/07084275.pdf?arnumber=7084275
pagesIET=10
referencesIET=[M.J. Harrold , A. Orso . 1. Harrold, M.J., Orso, A.: \u2018Retesting software during development and maintenance\u2019. Proc. Frontiers of Software Maintenance (FoSM 2008), Beijing, China, September 2008, pp. 99\u2013108. . Proc. Frontiers of Software Maintenance (FoSM 2008) , 99 - 108, G. Rothermel , M.J. Harrold , J. Ostrin . 2. Rothermel, G., Harrold, M.J., Ostrin, J., et al: \u2018An empirical study of the effects of minimization on the fault detection capabilities of test suites\u2019. Proc. Int. Conf. on Software Maintenance, Bethesda, USA, November 1998, pp. 34\u201343. . Proc. Int. Conf. on Software Maintenance , 34 - 43, H.K.N. Leung , L. White . 3. Leung, H.K.N., White, L.: \u2018Insights into regression testing\u2019. Proc. Int. Conf. on Software Maintenance, Miami, USA, October 1989, pp. 60\u201369. . Proc. Int. Conf. on Software Maintenance , 60 - 69, M.J. Harrold , R. Gupta , M.L. Soffo . 4. Harrold, M.J., Gupta, R., Soffo, M.L., et al: \u2018A methodology for controlling the size of a test suite\u2019, ACM Trans. Softw. Eng. Methodol., 1993, 2, (3), pp. 270\u2013285 (doi: 10.1145/152388.152391). . ACM Trans. Softw. Eng. Methodol. , 3 , 270 - 285, G. Rothermel , M.J. Harrold , J. v on Ronne . 5. Rothermel, G., Harrold, M.J., v on Ronne, J., et al: \u2018Empirical studies of test-suite reduction\u2019, Softw. Test. Verif. Reliab., 2002, 12, (4), pp. 219\u2013249 (doi: 10.1002/stvr.256). . Softw. Test. Verif. Reliab. , 4 , 219 - 249, D. Jeffrey , N. Gupta . 6. Jeffrey, D., Gupta, N.: \u2018Test suite reduction with selective redundancy\u2019. Proc. Int. Conf. on Software Maintenance, Budapest, Hungary, September 2005, pp. 549\u2013558. . Proc. Int. Conf. on Software Maintenance , 549 - 558, J.R. Horgan , S. London . 7. Horgan, J.R., London, S.: \u2018A data flow coverage testing tool for C\u2019. Proc. of the Second Symp. on Assessment of Quality Software Development Tools, New Orleans, USA, May 1992, pp. 2\u201310. . Proc. of the Second Symp. on Assessment of Quality Software Development Tools , 2 - 10, Y. Yu , J.A. Jones , M.J. Harrold . 8. Yu, Y., Jones, J.A., Harrold, M.J., et al: \u2018An empirical study of the effects of test-suite reduction on fault localization\u2019. Proc. Int. Conf. on Software Engineering, Leipzig, Germany, May 2008, pp. 201\u2013210. . Proc. Int. Conf. on Software Engineering , 201 - 210, S. McMaster , A.M. Memon . 9. McMaster, S., Memon, A.M.: \u2018Call stack coverage for test suite reduction\u2019. Proc. Int. Conf. on Software Maintenance, Budapest, Hungary, September 2005, pp. 39\u2013548. . Proc. Int. Conf. on Software Maintenance , 39 - 548, H. Hemmati , A. Arcuri , L. Briand . 10. Hemmati, H., Arcuri, A., Briand, L., et al: \u2018Achieving scalable model-based testing through test case diversity\u2019, ACM Trans. Softw. Eng. Methodol., 2013, 22, (1), pp. 1\u201342 (doi: 10.1145/2430536.2430540). . ACM Trans. Softw. Eng. Methodol. , 1 , 1 - 42, M.R. Garey , D.S. Johnson . (1979) 11. Garey, M.R., Johnson, D.S.: \u2018Computers and intractability: a guide to the theory of NP-completeness\u2019 (W. H. Freeman, 1979, 1st edn.). ., W. Dickinson , D. Leon , A. Podgurski . 12. Dickinson, W., Leon, D., Podgurski, A., et al: \u2018Finding failures by cluster analysis of execution profiles\u2019. Proc. Int. Conf. on Software Engineering, Toronto, Canada, May 2001, pp. 339\u2013348. . Proc. Int. Conf. on Software Engineering , 339 - 348, D. Leon , A. Podgurski . 13. Leon, D., Podgurski, A.: \u2018A Comparison of coverage-based and distribution-based techniques for filtering and prioritizing test cases\u2019. Proc. Int. Symp. on Software Reliability Engineering, Denver, USA, November 2003, pp. 442\u2013453. . Proc. Int. Symp. on Software Reliability Engineering , 442 - 453, S. Yoo , M. Harman , P. Tonella . 14. Yoo, S., Harman, M., Tonella, P., et al: \u2018Clustering test cases to achieve effective and scalable prioritization incorporating expert knowledge\u2019. Proc. Int. Symp. on Software Testing and Analysis, Chicago, USA, July 2009, pp. 201\u2013212. . Proc. Int. Symp. on Software Testing and Analysis , 201 - 212, R. Carlson , H. Do , A. Denton . 15. Carlson, R., Do, H., Denton, A.: \u2018A clustering approach to improving test case prioritization: an industrial case study\u2019. Proc. Int. Conf. on Software Maintenance, Williamsburg, USA, September 2011, pp. 382\u2013391. . Proc. Int. Conf. on Software Maintenance , 382 - 391, W. Masri , A. Podgurski , D. Leon . 16. Masri, W., Podgurski, A., Leon, D., et al: \u2018An empirical study of test case filtering techniques based on exercising information flows\u2019, IEEE Trans. Softw. Eng., 2007, 33, (7), pp. 454\u2013477 (doi: 10.1109/TSE.2007.1020). . IEEE Trans. Softw. Eng. , 7 , 454 - 477, S.Y. Chen , Z.Y. Chen , Z. Zhao . 17. Chen, S.Y., Chen, Z.Y., Zhao, Z., et al: \u2018Using semi-supervised clustering to improve regression test selection techniques\u2019. Proc. Int. Conf. on Software Testing, Verification and Validation, Berlin, Germany, March 2011, pp. 21\u201325. . Proc. Int. Conf. on Software Testing, Verification and Validation , 21 - 25, V. Vangala , J. Czerwonka , P. Talluri . 18. Vangala, V., Czerwonka, J., Talluri, P., et al: \u2018Test case comparison and clustering using program profiles and static execution\u2019. Proc. Int. Conf. on the Foundations of Software Engineering, Amsterdam, The Netherlands, August 2009, pp. 293\u2013294. . Proc. Int. Conf. on the Foundations of Software Engineering , 293 - 294, A. Smith , J. Geiger , G.M. Kapfhammer . 19. Smith, A., Geiger, J., Kapfhammer, G.M., et al: \u2018Test suite reduction and prioritization with call trees\u2019. Proc. Int. Conf. on Automated Software Engineering, Atlanta, USA, November 2007, pp. 539\u2013540. . Proc. Int. Conf. on Automated Software Engineering , 539 - 540, C. Zhang , Z.Y. Chen , Z. Zhao . 20. Zhang, C., Chen, Z.Y., Zhao, Z., et al: \u2018An improved regression test selection technique by clustering execution profiles\u2019. Proc. Int. Conf. on Quality Software, Zhangjiajie, China, July 2010, pp. 171\u2013179. . Proc. Int. Conf. on Quality Software , 171 - 179, Y. Fazlalizadeh , A. Khalilian , M.A. Azgomi . 21. Fazlalizadeh, Y., Khalilian, A., Azgomi, M.A., et al: \u2018Incorporating historical test case performance data and resource constraints into test case prioritization\u2019, Tests Proofs Lect. Notes Comput. Sci., 2009, 5668, pp. 43\u201357 (doi: 10.1007/978-3-642-02949-3_5). . Tests Proofs Lect. Notes Comput. Sci. , 43 - 57, Z.K. Ma , J.J. Zhao . 22. Ma, Z.K., Zhao, J.J.: \u2018Test case prioritization based on analysis of program structure\u2019. Proc. Asia-Pacific Software Engineering Conf., Beijing, China, December 2008, pp. 471\u2013478. . Proc. Asia-Pacific Software Engineering Conf. , 471 - 478, V.I. Levenshtein . 23. Levenshtein, V.I.: \u2018Binary codes capable of correcting deletions, insertions, and reversals\u2019, Sov. Phys., Dokl., 1966, 10, (8), pp. 707\u2013710. . Sov. Phys., Dokl. , 8 , 707 - 710, K.C. Tai . The tree-to-tree correction problem. J. ACM , 3 , 422 - 433, J. MacQueen . 25. MacQueen, J.: \u2018Some Methods for classification and analysis of multivariate observations\u2019. Proc. Fifth Berkeley Symp. on Math. Statis. and Prob., Berkeley, USA, 1967, pp. 281\u2013297. . Proc. Fifth Berkeley Symp. on Math. Statis. and Prob. , 281 - 297, C.K. Luk , R. Cohn , R. Muth . 26. Luk, C.K., Cohn, R., Muth, R., et al: \u2018Pin: building customized program analysis tools with dynamic instrumentation\u2019. Proc. Int. Conf. on Programming Language Design and Implementation, Chicago, USA, June 2005, pp. 190\u2013200. . Proc. Int. Conf. on Programming Language Design and Implementation , 190 - 200, G. Ammons , T. Ball , J.R. Larus . 27. Ammons, G., Ball, T., Larus, J.R., et al: \u2018Exploiting hardware performance counters with flow and context sensitive profiling\u2019. Proc. Int. Conf. on Programming Language Design and Implementation, Las Vegas, USA, May 1997, pp. 85\u201396. . Proc. Int. Conf. on Programming Language Design and Implementation , 85 - 96, D. Gusfield . (1997) 28. Gusfield, D.: \u2018Algorithms on strings, trees and sequences: computer science and computational biology\u2019 (Cambridge University Press, 1997, 1st end.). ., M. Pawlik , N. Augsten . 29. Pawlik, M., Augsten, N.: \u2018RTED: a robust algorithm for the tree edit distance\u2019, Proc. VLDB Endowment, 2011, 5, (4), pp. 334\u2013345 (doi: 10.14778/2095686.2095692). . Proc. VLDB Endowment , 4 , 334 - 345, A. Rajaraman , J.D. Ullman . (2011) 30. Rajaraman, A., Ullman, J.D.: \u2018Mining of massive datasets\u2019 (Cambridge University Press, 2011, 1st edn.). ., R. Tibshirani , G. Walther , T. Hastie . 31. Tibshirani, R., Walther, G., Hastie, T., et al: \u2018Estimating the number of clusters in a data set via the gap statistic\u2019, J. R. Stat. Soc., B, 2001, 63, (2), pp. 411\u2013423 (doi: 10.1111/1467-9868.00293). . J. R. Stat. Soc., B , 2 , 411 - 423, F. Wilcoxon . Individual comparisons by ranking methods. Biometrics , 80 - 83, W.E. Wong , J.R. Horgan , S. London . 33. Wong, W.E., Horgan, J.R., London, S., et al: \u2018Effect of test set minimization on fault detection effectiveness\u2019. Proc. Int. Conf. on Software Engineering, Seattle, USA, April 1995, pp. 41\u201350. . Proc. Int. Conf. on Software Engineering , 41 - 50, H. Do , S. Elbaum , G. Rothermel . 34. Do, H., Elbaum, S., Rothermel, G., et al: \u2018Supporting controlled experimentation with testing techniques: an infrastructure and its potential impact\u2019, Empi. Soft. Eng., 2005, 10, (4), pp. 405\u2013435 (doi: 10.1007/s10664-005-3861-2). . Empi. Soft. Eng. , 4 , 405 - 435]
authorsIET=[author name:Rongcun Wang, affiliation:, author name:Binbin Qu, affiliation:, author name:Yansheng Lu, affiliation:]
